{"ast":null,"code":"var _jsxFileName = \"/Users/stephentanksley/User-Interface/tone-synth/src/components/synth.js\";\nimport React from \"react\";\nimport * as Tone from \"tone\";\nexport const Synth = () => {\n  let midi, data;\n  let AudioContext = window.AudioContext || window.webkitAudioContext;\n  let audioCtx = new AudioContext();\n  console.log(audioCtx); // We initialize MIDI support to determine if the user's browser can support MIDI.\n\n  const MIDIinit = async () => {\n    try {\n      const midiAccess = await navigator.requestMIDIAccess();\n      onMIDISuccess(midiAccess);\n    } catch (err) {\n      onMIDIFailure(err);\n    }\n  }; // If successful, we run the onMIDISuccess callback.\n\n\n  const onMIDISuccess = midiAccess => {\n    midi = midiAccess;\n    let inputs = midi.inputs.values();\n\n    for (let input = inputs.next(); input && !input.done; input = inputs.next()) {\n      input.value.onmidimessage = onMIDIMessage;\n    }\n\n    let outputs = midi.outputs; // console.log(inputs);\n    // console.log(outputs);\n  };\n\n  const onMIDIMessage = message => {\n    data = message.data; // console.log(\"MIDI data\", data);\n  }; // Otherwise, we run the onMIDIFailure callback to show that we don't have that access.\n\n\n  const onMIDIFailure = () => {\n    console.log(\"Could not access your MIDI devices.\");\n  };\n\n  const synth = new Tone.Synth().toDestination();\n\n  const playC = () => {\n    synth.triggerAttackRelease(\"C4\", \"8n\");\n  };\n\n  const playE = () => {\n    synth.triggerAttackRelease(\"E4\", \"8n\");\n  };\n\n  const slider = () => {\n    const slideSynth = new Tone.Oscillator().toDestination();\n    slideSynth.frequency.value = \"C4\";\n    slideSynth.frequency.rampTo(\"C2\", 2);\n    slideSynth.start().stop(\"+3\");\n  };\n\n  MIDIinit();\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"button\", {\n    name: \"play-C4\",\n    id: \"play-C4\",\n    onClick: playC,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 7\n    }\n  }, \"Play C4\"), /*#__PURE__*/React.createElement(\"button\", {\n    name: \"play-E4\",\n    id: \"play-E4\",\n    onClick: playE,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 7\n    }\n  }, \"Play E4\"), /*#__PURE__*/React.createElement(\"button\", {\n    name: \"play-slide\",\n    id: \"play-slide\",\n    onClick: slider,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 7\n    }\n  }, \"Play Slide\"));\n};","map":{"version":3,"sources":["/Users/stephentanksley/User-Interface/tone-synth/src/components/synth.js"],"names":["React","Tone","Synth","midi","data","AudioContext","window","webkitAudioContext","audioCtx","console","log","MIDIinit","midiAccess","navigator","requestMIDIAccess","onMIDISuccess","err","onMIDIFailure","inputs","values","input","next","done","value","onmidimessage","onMIDIMessage","outputs","message","synth","toDestination","playC","triggerAttackRelease","playE","slider","slideSynth","Oscillator","frequency","rampTo","start","stop"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport * as Tone from \"tone\";\n\nexport const Synth = () => {\n  let midi, data;\n\n  let AudioContext = window.AudioContext || window.webkitAudioContext;\n  let audioCtx = new AudioContext();\n\n  console.log(audioCtx);\n\n  // We initialize MIDI support to determine if the user's browser can support MIDI.\n  const MIDIinit = async () => {\n    try {\n      const midiAccess = await navigator.requestMIDIAccess();\n      onMIDISuccess(midiAccess);\n    } catch (err) {\n      onMIDIFailure(err);\n    }\n  };\n\n  // If successful, we run the onMIDISuccess callback.\n  const onMIDISuccess = (midiAccess) => {\n    midi = midiAccess;\n    let inputs = midi.inputs.values();\n\n    for (\n      let input = inputs.next();\n      input && !input.done;\n      input = inputs.next()\n    ) {\n      input.value.onmidimessage = onMIDIMessage;\n    }\n\n    let outputs = midi.outputs;\n\n    // console.log(inputs);\n    // console.log(outputs);\n  };\n\n  const onMIDIMessage = (message) => {\n    data = message.data;\n    // console.log(\"MIDI data\", data);\n  };\n\n  // Otherwise, we run the onMIDIFailure callback to show that we don't have that access.\n  const onMIDIFailure = () => {\n    console.log(\"Could not access your MIDI devices.\");\n  };\n\n  const synth = new Tone.Synth().toDestination();\n\n  const playC = () => {\n    synth.triggerAttackRelease(\"C4\", \"8n\");\n  };\n\n  const playE = () => {\n    synth.triggerAttackRelease(\"E4\", \"8n\");\n  };\n\n  const slider = () => {\n    const slideSynth = new Tone.Oscillator().toDestination();\n    slideSynth.frequency.value = \"C4\";\n    slideSynth.frequency.rampTo(\"C2\", 2);\n    slideSynth.start().stop(\"+3\");\n  };\n\n  MIDIinit();\n\n  return (\n    <div>\n      <button name=\"play-C4\" id=\"play-C4\" onClick={playC}>\n        Play C4\n      </button>\n      <button name=\"play-E4\" id=\"play-E4\" onClick={playE}>\n        Play E4\n      </button>\n\n      <button name=\"play-slide\" id=\"play-slide\" onClick={slider}>\n        Play Slide\n      </button>\n    </div>\n  );\n};\n"]},"metadata":{},"sourceType":"module"}