{"ast":null,"code":"var _jsxFileName = \"/Users/stephentanksley/User-Interface/tone-synth/src/components/synth.js\";\nimport React, { useState } from \"react\";\nimport * as Tone from \"tone\";\nexport const Synth = () => {\n  const [note, setNote] = useState();\n  let midi, data;\n  let AudioContext = window.AudioContext || window.webkitAudioContext;\n  let audioCtx = new AudioContext(); // console.log(audioCtx);\n  // We initialize MIDI support to determine if the user's browser can support MIDI.\n\n  const MIDIinit = async () => {\n    try {\n      const midiAccess = await navigator.requestMIDIAccess();\n      onMIDISuccess(midiAccess);\n    } catch (err) {\n      onMIDIFailure(err);\n    }\n  }; // If successful, we run the onMIDISuccess callback.\n\n\n  const onMIDISuccess = midiAccess => {\n    midi = midiAccess;\n    let inputs = midi.inputs.values();\n\n    for (let input = inputs.next(); input && !input.done; input = inputs.next()) {\n      input.value.onmidimessage = onMIDIMessage;\n    }\n\n    let outputs = midi.outputs;\n  };\n\n  const onMIDIMessage = message => {\n    data = message.data;\n    let note = data[1];\n    let velocity = data[2];\n    console.log(\"MIDI data\", data);\n    playNote(note, velocity);\n  }; // Otherwise, we run the onMIDIFailure callback to show that we don't have that access.\n\n\n  const onMIDIFailure = () => {\n    console.log(\"Could not access your MIDI devices.\");\n  };\n\n  const synth = new Tone.Synth().toDestination();\n\n  const playNote = (note, velocity) => {\n    const requestedNote = Tone.Frequency(note, \"midi\").toNote();\n    synth.triggerAttack(requestedNote, \"+0.5\", velocity);\n    synth.triggerRelease(\"0.2\");\n  };\n\n  MIDIinit();\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 10\n    }\n  }, \"\\\"I'm building a synthesizer!\\\"\");\n};","map":{"version":3,"sources":["/Users/stephentanksley/User-Interface/tone-synth/src/components/synth.js"],"names":["React","useState","Tone","Synth","note","setNote","midi","data","AudioContext","window","webkitAudioContext","audioCtx","MIDIinit","midiAccess","navigator","requestMIDIAccess","onMIDISuccess","err","onMIDIFailure","inputs","values","input","next","done","value","onmidimessage","onMIDIMessage","outputs","message","velocity","console","log","playNote","synth","toDestination","requestedNote","Frequency","toNote","triggerAttack","triggerRelease"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,OAAO,KAAKC,IAAZ,MAAsB,MAAtB;AAEA,OAAO,MAAMC,KAAK,GAAG,MAAM;AACzB,QAAM,CAACC,IAAD,EAAOC,OAAP,IAAkBJ,QAAQ,EAAhC;AACA,MAAIK,IAAJ,EAAUC,IAAV;AAEA,MAAIC,YAAY,GAAGC,MAAM,CAACD,YAAP,IAAuBC,MAAM,CAACC,kBAAjD;AACA,MAAIC,QAAQ,GAAG,IAAIH,YAAJ,EAAf,CALyB,CAOzB;AAEA;;AACA,QAAMI,QAAQ,GAAG,YAAY;AAC3B,QAAI;AACF,YAAMC,UAAU,GAAG,MAAMC,SAAS,CAACC,iBAAV,EAAzB;AACAC,MAAAA,aAAa,CAACH,UAAD,CAAb;AACD,KAHD,CAGE,OAAOI,GAAP,EAAY;AACZC,MAAAA,aAAa,CAACD,GAAD,CAAb;AACD;AACF,GAPD,CAVyB,CAmBzB;;;AACA,QAAMD,aAAa,GAAIH,UAAD,IAAgB;AACpCP,IAAAA,IAAI,GAAGO,UAAP;AACA,QAAIM,MAAM,GAAGb,IAAI,CAACa,MAAL,CAAYC,MAAZ,EAAb;;AAEA,SACE,IAAIC,KAAK,GAAGF,MAAM,CAACG,IAAP,EADd,EAEED,KAAK,IAAI,CAACA,KAAK,CAACE,IAFlB,EAGEF,KAAK,GAAGF,MAAM,CAACG,IAAP,EAHV,EAIE;AACAD,MAAAA,KAAK,CAACG,KAAN,CAAYC,aAAZ,GAA4BC,aAA5B;AACD;;AAED,QAAIC,OAAO,GAAGrB,IAAI,CAACqB,OAAnB;AACD,GAbD;;AAeA,QAAMD,aAAa,GAAIE,OAAD,IAAa;AACjCrB,IAAAA,IAAI,GAAGqB,OAAO,CAACrB,IAAf;AACA,QAAIH,IAAI,GAAGG,IAAI,CAAC,CAAD,CAAf;AACA,QAAIsB,QAAQ,GAAGtB,IAAI,CAAC,CAAD,CAAnB;AACAuB,IAAAA,OAAO,CAACC,GAAR,CAAY,WAAZ,EAAyBxB,IAAzB;AAEAyB,IAAAA,QAAQ,CAAC5B,IAAD,EAAOyB,QAAP,CAAR;AACD,GAPD,CAnCyB,CA4CzB;;;AACA,QAAMX,aAAa,GAAG,MAAM;AAC1BY,IAAAA,OAAO,CAACC,GAAR,CAAY,qCAAZ;AACD,GAFD;;AAIA,QAAME,KAAK,GAAG,IAAI/B,IAAI,CAACC,KAAT,GAAiB+B,aAAjB,EAAd;;AAEA,QAAMF,QAAQ,GAAG,CAAC5B,IAAD,EAAOyB,QAAP,KAAoB;AACnC,UAAMM,aAAa,GAAGjC,IAAI,CAACkC,SAAL,CAAehC,IAAf,EAAqB,MAArB,EAA6BiC,MAA7B,EAAtB;AACAJ,IAAAA,KAAK,CAACK,aAAN,CAAoBH,aAApB,EAAmC,MAAnC,EAA2CN,QAA3C;AACAI,IAAAA,KAAK,CAACM,cAAN,CAAqB,KAArB;AACD,GAJD;;AAMA3B,EAAAA,QAAQ;AAER,sBAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uCAAP;AACD,CA5DM","sourcesContent":["import React, { useState } from \"react\";\nimport * as Tone from \"tone\";\n\nexport const Synth = () => {\n  const [note, setNote] = useState();\n  let midi, data;\n\n  let AudioContext = window.AudioContext || window.webkitAudioContext;\n  let audioCtx = new AudioContext();\n\n  // console.log(audioCtx);\n\n  // We initialize MIDI support to determine if the user's browser can support MIDI.\n  const MIDIinit = async () => {\n    try {\n      const midiAccess = await navigator.requestMIDIAccess();\n      onMIDISuccess(midiAccess);\n    } catch (err) {\n      onMIDIFailure(err);\n    }\n  };\n\n  // If successful, we run the onMIDISuccess callback.\n  const onMIDISuccess = (midiAccess) => {\n    midi = midiAccess;\n    let inputs = midi.inputs.values();\n\n    for (\n      let input = inputs.next();\n      input && !input.done;\n      input = inputs.next()\n    ) {\n      input.value.onmidimessage = onMIDIMessage;\n    }\n\n    let outputs = midi.outputs;\n  };\n\n  const onMIDIMessage = (message) => {\n    data = message.data;\n    let note = data[1];\n    let velocity = data[2];\n    console.log(\"MIDI data\", data);\n\n    playNote(note, velocity);\n  };\n\n  // Otherwise, we run the onMIDIFailure callback to show that we don't have that access.\n  const onMIDIFailure = () => {\n    console.log(\"Could not access your MIDI devices.\");\n  };\n\n  const synth = new Tone.Synth().toDestination();\n\n  const playNote = (note, velocity) => {\n    const requestedNote = Tone.Frequency(note, \"midi\").toNote();\n    synth.triggerAttack(requestedNote, \"+0.5\", velocity);\n    synth.triggerRelease(\"0.2\");\n  };\n\n  MIDIinit();\n\n  return <div>\"I'm building a synthesizer!\"</div>;\n};\n"]},"metadata":{},"sourceType":"module"}